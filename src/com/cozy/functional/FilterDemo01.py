# filter函数 --> 用于过滤序列，把传入的函数依次作用于每个元素
# filter()函数返回的是一个Iterator，需要用list()函数获得所有结果并返回list

# 在一个list中，删掉偶数，只保留奇数
def is_odd(n):
    return n%2 == 1

print(filter(is_odd,[1,2,4,5,6,9,10,15]))
# 结果: [1, 5, 9, 15]

# ==============================================================

# 删除序列中的空字符串
def not_empty(s):
    return s and s.strip()

print(filter(not_empty,['A','','B',None,'C',' ']))
# 结果: ['A', 'B', 'C']

# ==============================================================

# 求素数：使用埃氏筛法
# 埃氏筛法：列出从2开始所有自然数，构造一个序列
#         取序列第一个数，它一定是素数，然后用2把序列的2的倍数筛掉
#         取新序列的第一个数3，它一定是素数，然后用3把序列的3的倍数筛掉
#         取新序列的第一个数5，然后用5把序列的5的倍数筛掉
#         不断筛下去，就可以得到所有的素数。

# 1、构造一个从3开始的奇数序列
def _odd_iter():
    n = 1
    while True:
        n = n + 2
        yield n

# 2、定义一个筛选函数
def _not_divisible(n):
    return lambda x: x % n > 0

# 3、定义一个生成器，不断返回下一个素数
def primes():
    yield 2
    it = _odd_iter() # 初始序列
    while True:
        n = next(it) # 返回序列的第一个数
        yield n
        it = filter(_not_divisible(n),it) # 构造新序列
# 这个生成器先返回第一个素数2，然后，利用filter()不断产生筛选后的新的序列。
#
# 由于primes()也是一个无限序列，所以调用时需要设置一个退出循环的条件：

# 打印1000以内的素数:
for n in primes():
    if n < 1000:
        print(n)
    else:
        break

# ==============================================================

# 回数是指从左向右读和从右向左读都是一样的数，例如12321，909。请利用filter()筛选出回数
# 思路：将数字转为字符串然后逆转比较
def is_palindrome(n):
    m = str(n)
    return m == m[::-1] # 取从后向前（相反）的元素

output = filter(is_palindrome, range(1, 1000))
print('1~1000:', list(output))
if list(filter(is_palindrome, range(1, 200))) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191]:
    print('测试成功!')
else:
    print('测试失败!')


# ==============================================================

a=[1,2,3.4,5]
print(a)
# [ 1 2 3 4 5 ]

print(a[-1]) ###取最后一个元素
# [5]

print(a[:-1])  ### 除了最后一个取全部
# [ 1 2 3 4 ]

print(a[::-1]) ### 取从后向前（相反）的元素
# [ 5 4 3 2 1 ]

print(a[2::-1]) ### 取从下标为2的元素翻转读取
# [ 3 2 1 ]

# ==============================================================













